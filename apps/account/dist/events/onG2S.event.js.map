{
  "version": 3,
  "sources": ["../../src/events/onG2S.event.js"],
  "sourcesContent": ["import config from '@peekaboo-ssr/config/lobby';\r\nimport BaseEvent from '@peekaboo-ssr/events/BaseEvent';\r\nimport { getHandlerByPacketType } from '../handlers/index.js';\r\nimport { parsePacketG2S } from '@peekaboo-ssr/utils';\r\n\r\nclass G2SEventHandler extends BaseEvent {\r\n  onConnection(socket) {\r\n    console.log(\r\n      `Gate connected from: ${socket.remoteAddress}:${socket.remotePort}`,\r\n    );\r\n    socket.buffer = Buffer.alloc(0);\r\n  }\r\n\r\n  async onData(socket, data) {\r\n    console.log('Service\uAC00 \uAC8C\uC774\uD2B8\uB85C\uBD80\uD130 \uB370\uC774\uD130\uB97C \uBC1B\uC74C..', data);\r\n    socket.buffer = Buffer.concat([socket.buffer, data]);\r\n\r\n    while (\r\n      socket.buffer.length >=\r\n      config.header.client.typeLength + config.header.client.clientKeyLength\r\n    ) {\r\n      let offset = 0;\r\n      const packetType = socket.buffer.readUint16BE(offset);\r\n      offset += config.header.client.typeLength;\r\n      console.log(packetType);\r\n\r\n      const clientKeyLength = socket.buffer.readUInt8(offset);\r\n      offset += config.header.client.clientKeyLength;\r\n      console.log(clientKeyLength);\r\n\r\n      const clientKey = socket.buffer\r\n        .subarray(offset, offset + clientKeyLength)\r\n        .toString();\r\n      console.log(clientKey);\r\n      offset += clientKeyLength;\r\n\r\n      const totalHeaderLength =\r\n        config.header.client.typeLength +\r\n        config.header.client.clientKeyLength +\r\n        clientKeyLength;\r\n\r\n      if (socket.buffer.length < totalHeaderLength) {\r\n        break;\r\n      }\r\n\r\n      const payloadLength = socket.buffer.readUint32BE(offset);\r\n      offset += config.header.client.payloadLength;\r\n      console.log(payloadLength);\r\n      const totalPacketLength = totalHeaderLength + payloadLength;\r\n\r\n      if (socket.buffer.length < totalPacketLength) {\r\n        break;\r\n      }\r\n      const payloadBuffer = socket.buffer.subarray(\r\n        offset,\r\n        offset + payloadLength,\r\n      );\r\n      offset += payloadLength;\r\n      try {\r\n        console.error('!!!!!', payloadBuffer);\r\n        const payload = parsePacketG2S(payloadBuffer);\r\n        socket.buffer = socket.buffer.subarray(offset);\r\n\r\n        const handler = getHandlerByPacketType(packetType);\r\n\r\n        await handler(socket, clientKey, payload);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  onEnd(socket) {\r\n    console.log('onClose', socket.remoteAddress, socket.remotePort);\r\n  }\r\n\r\n  onError(socket, err) {\r\n    console.log('onClose', socket.remoteAddress, socket.remotePort);\r\n  }\r\n}\r\n\r\nexport default G2SEventHandler;\r\n"],
  "mappings": "AAAA,OAAO,YAAY;AACnB,OAAO,eAAe;AACtB,SAAS,8BAA8B;AACvC,SAAS,sBAAsB;AAE/B,MAAM,wBAAwB,UAAU;AAAA,EACtC,aAAa,QAAQ;AACnB,YAAQ;AAAA,MACN,wBAAwB,OAAO,aAAa,IAAI,OAAO,UAAU;AAAA,IACnE;AACA,WAAO,SAAS,OAAO,MAAM,CAAC;AAAA,EAChC;AAAA,EAEA,MAAM,OAAO,QAAQ,MAAM;AACzB,YAAQ,IAAI,8FAA6B,IAAI;AAC7C,WAAO,SAAS,OAAO,OAAO,CAAC,OAAO,QAAQ,IAAI,CAAC;AAEnD,WACE,OAAO,OAAO,UACd,OAAO,OAAO,OAAO,aAAa,OAAO,OAAO,OAAO,iBACvD;AACA,UAAI,SAAS;AACb,YAAM,aAAa,OAAO,OAAO,aAAa,MAAM;AACpD,gBAAU,OAAO,OAAO,OAAO;AAC/B,cAAQ,IAAI,UAAU;AAEtB,YAAM,kBAAkB,OAAO,OAAO,UAAU,MAAM;AACtD,gBAAU,OAAO,OAAO,OAAO;AAC/B,cAAQ,IAAI,eAAe;AAE3B,YAAM,YAAY,OAAO,OACtB,SAAS,QAAQ,SAAS,eAAe,EACzC,SAAS;AACZ,cAAQ,IAAI,SAAS;AACrB,gBAAU;AAEV,YAAM,oBACJ,OAAO,OAAO,OAAO,aACrB,OAAO,OAAO,OAAO,kBACrB;AAEF,UAAI,OAAO,OAAO,SAAS,mBAAmB;AAC5C;AAAA,MACF;AAEA,YAAM,gBAAgB,OAAO,OAAO,aAAa,MAAM;AACvD,gBAAU,OAAO,OAAO,OAAO;AAC/B,cAAQ,IAAI,aAAa;AACzB,YAAM,oBAAoB,oBAAoB;AAE9C,UAAI,OAAO,OAAO,SAAS,mBAAmB;AAC5C;AAAA,MACF;AACA,YAAM,gBAAgB,OAAO,OAAO;AAAA,QAClC;AAAA,QACA,SAAS;AAAA,MACX;AACA,gBAAU;AACV,UAAI;AACF,gBAAQ,MAAM,SAAS,aAAa;AACpC,cAAM,UAAU,eAAe,aAAa;AAC5C,eAAO,SAAS,OAAO,OAAO,SAAS,MAAM;AAE7C,cAAM,UAAU,uBAAuB,UAAU;AAEjD,cAAM,QAAQ,QAAQ,WAAW,OAAO;AAAA,MAC1C,SAAS,GAAG;AACV,gBAAQ,MAAM,CAAC;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,QAAQ;AACZ,YAAQ,IAAI,WAAW,OAAO,eAAe,OAAO,UAAU;AAAA,EAChE;AAAA,EAEA,QAAQ,QAAQ,KAAK;AACnB,YAAQ,IAAI,WAAW,OAAO,eAAe,OAAO,UAAU;AAAA,EAChE;AACF;AAEA,IAAO,sBAAQ;",
  "names": []
}
