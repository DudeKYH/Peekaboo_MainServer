{
  "version": 3,
  "sources": ["../../../src/handlers/auth/login.handler.js"],
  "sourcesContent": ["import config from '@peekaboo-ssr/config/account';\r\nimport { createPacketS2G } from '@peekaboo-ssr/utils';\r\nimport databaseManager from '@peekaboo-ssr/classes/DatabaseManager';\r\nimport userCommands from '@peekaboo-ssr/commands/userCommands';\r\nimport jwt from 'jsonwebtoken';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport bcrypt from 'bcrypt';\r\n\r\nexport const loginRequestHandler = async (socket, clientKey, payload) => {\r\n  try {\r\n    console.log('loginRequestHandler............');\r\n\r\n    const { id, password } = payload;\r\n    // DB \uAC80\uC99D, ID / PASSWORD \uAC80\uC99D\r\n    const user = await userCommands.findUser(databaseManager, id);\r\n\r\n    if (!user || user.password !== password) {\r\n      const payloadData = {\r\n        globalFailCode: 3,\r\n        userId: 'none',\r\n        token: 'none',\r\n      };\r\n      const packet = createPacketS2G(\r\n        config.clientPacket.account.LoginResponse,\r\n        clientKey,\r\n        payloadData,\r\n      );\r\n      socket.write(packet);\r\n      throw new Error(`\uBE44\uBC00\uBC88\uD638\uAC00 \uB9DE\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.`);\r\n    }\r\n    // \uB098\uC911\uC5D0\uB294 bcrypt \uAC80\uC99D\uC73C\uB85C \uAC15\uD654 - \uD68C\uC6D0\uAC00\uC785 \uAE30\uB2A5 \uCD94\uAC00\uC2DC TODO\r\n    // const isPasswordValid = await bcrypt.compare(password, user.password);\r\n    // if(!isPasswordValid){\r\n    //   throw new Error(`\uBE44\uBC00\uBC88\uD638\uAC00 \uB9DE\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.`);\r\n    // }\r\n\r\n    // UUID DB\uC5D0 \uC788\uB294\uC9C0 \uAC80\uC99D \uD6C4 \uBC1C\uAE09\r\n    const userId = !user.uuid\r\n      ? await userCommands.createUserUuid(databaseManager, id, uuidv4())\r\n      : user.uuid;\r\n\r\n    // JWT \uD1A0\uD070 \uBC1C\uAE09\r\n    const token = jwt.sign({ id }, config.jwt.key, {\r\n      expiresIn: config.jwt.expiresIn,\r\n    });\r\n\r\n    // globalFailCode, userId, token \uC744 payload\uB85C \uB9CC\uB4E6\r\n\r\n    const payloadData = {\r\n      globalFailCode: 0,\r\n      userId,\r\n      token,\r\n    };\r\n\r\n    const packet = createPacketS2G(\r\n      config.clientPacket.account.LoginResponse,\r\n      clientKey,\r\n      payloadData,\r\n    );\r\n    socket.write(packet);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n"],
  "mappings": "AAAA,OAAO,YAAY;AACnB,SAAS,uBAAuB;AAChC,OAAO,qBAAqB;AAC5B,OAAO,kBAAkB;AACzB,OAAO,SAAS;AAChB,SAAS,MAAM,cAAc;AAC7B,OAAO,YAAY;AAEZ,MAAM,sBAAsB,OAAO,QAAQ,WAAW,YAAY;AACvE,MAAI;AACF,YAAQ,IAAI,iCAAiC;AAE7C,UAAM,EAAE,IAAI,SAAS,IAAI;AAEzB,UAAM,OAAO,MAAM,aAAa,SAAS,iBAAiB,EAAE;AAE5D,QAAI,CAAC,QAAQ,KAAK,aAAa,UAAU;AACvC,YAAMA,eAAc;AAAA,QAClB,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,OAAO;AAAA,MACT;AACA,YAAMC,UAAS;AAAA,QACb,OAAO,aAAa,QAAQ;AAAA,QAC5B;AAAA,QACAD;AAAA,MACF;AACA,aAAO,MAAMC,OAAM;AACnB,YAAM,IAAI,MAAM,uEAAgB;AAAA,IAClC;AAQA,UAAM,SAAS,CAAC,KAAK,OACjB,MAAM,aAAa,eAAe,iBAAiB,IAAI,OAAO,CAAC,IAC/D,KAAK;AAGT,UAAM,QAAQ,IAAI,KAAK,EAAE,GAAG,GAAG,OAAO,IAAI,KAAK;AAAA,MAC7C,WAAW,OAAO,IAAI;AAAA,IACxB,CAAC;AAID,UAAM,cAAc;AAAA,MAClB,gBAAgB;AAAA,MAChB;AAAA,MACA;AAAA,IACF;AAEA,UAAM,SAAS;AAAA,MACb,OAAO,aAAa,QAAQ;AAAA,MAC5B;AAAA,MACA;AAAA,IACF;AACA,WAAO,MAAM,MAAM;AAAA,EACrB,SAAS,GAAG;AACV,YAAQ,MAAM,CAAC;AAAA,EACjB;AACF;",
  "names": ["payloadData", "packet"]
}
