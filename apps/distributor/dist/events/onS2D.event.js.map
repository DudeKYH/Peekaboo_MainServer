{
  "version": 3,
  "sources": ["../../src/events/onS2D.event.js"],
  "sourcesContent": ["import config from '@peekaboo-ssr/config/distributor';\r\nimport { getHandlerByPacketType } from '../handlers/index.js';\r\nimport BaseEvent from '@peekaboo-ssr/events/BaseEvent';\r\nimport { sendInfo } from '../notifications/connection.notification.js';\r\nimport { serviceMap } from '../data/connection.data.js';\r\n\r\nclass S2DEventHandler extends BaseEvent {\r\n  onConnection(socket) {\r\n    console.log(\r\n      `Client connected from: ${socket.remoteAddress}:${socket.remotePort}`,\r\n    );\r\n    sendInfo(socket);\r\n    socket.buffer = Buffer.alloc(0);\r\n  }\r\n\r\n  async onData(socket, data) {\r\n    console.log('Distributor\uAC00 \uB370\uC774\uD130\uB97C \uBC1B\uC74C..', data);\r\n    socket.buffer = Buffer.concat([socket.buffer, data]);\r\n\r\n    while (socket.buffer.length >= config.header.service.typeLength) {\r\n      let offset = 0;\r\n      const packetType = socket.buffer.readUint16BE(offset);\r\n      offset += config.header.service.typeLength;\r\n\r\n      const payloadLength = socket.buffer.readUint32BE(offset);\r\n      offset += config.header.service.payloadLength;\r\n\r\n      const totalPacketLength = offset + payloadLength;\r\n\r\n      if (socket.buffer.length < totalPacketLength) {\r\n        break;\r\n      }\r\n      const payload = socket.buffer\r\n        .subarray(offset, offset + payloadLength)\r\n        .toString('utf-8');\r\n\r\n      socket.buffer = socket.buffer.subarray(totalPacketLength);\r\n\r\n      try {\r\n        const payloadObj = JSON.parse(payload);\r\n\r\n        console.log(packetType);\r\n\r\n        const handler = getHandlerByPacketType(packetType);\r\n\r\n        await handler(socket, payloadObj);\r\n      } catch (e) {\r\n        console.error(e);\r\n        process.exit(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  onEnd(socket) {\r\n    const key = socket.remoteAddress + ':' + socket.remotePort;\r\n    console.log('onClose', socket.remoteAddress, socket.remotePort);\r\n    delete serviceMap[key];\r\n    sendInfo();\r\n  }\r\n\r\n  onError(socket, err) {\r\n    const key = socket.remoteAddress + ':' + socket.remotePort;\r\n    console.log('onClose', socket.remoteAddress, socket.remotePort);\r\n    delete serviceMap[key];\r\n    sendInfo();\r\n  }\r\n}\r\n\r\nexport default S2DEventHandler;\r\n"],
  "mappings": "AAAA,OAAO,YAAY;AACnB,SAAS,8BAA8B;AACvC,OAAO,eAAe;AACtB,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAE3B,MAAM,wBAAwB,UAAU;AAAA,EACtC,aAAa,QAAQ;AACnB,YAAQ;AAAA,MACN,0BAA0B,OAAO,aAAa,IAAI,OAAO,UAAU;AAAA,IACrE;AACA,aAAS,MAAM;AACf,WAAO,SAAS,OAAO,MAAM,CAAC;AAAA,EAChC;AAAA,EAEA,MAAM,OAAO,QAAQ,MAAM;AACzB,YAAQ,IAAI,6DAA0B,IAAI;AAC1C,WAAO,SAAS,OAAO,OAAO,CAAC,OAAO,QAAQ,IAAI,CAAC;AAEnD,WAAO,OAAO,OAAO,UAAU,OAAO,OAAO,QAAQ,YAAY;AAC/D,UAAI,SAAS;AACb,YAAM,aAAa,OAAO,OAAO,aAAa,MAAM;AACpD,gBAAU,OAAO,OAAO,QAAQ;AAEhC,YAAM,gBAAgB,OAAO,OAAO,aAAa,MAAM;AACvD,gBAAU,OAAO,OAAO,QAAQ;AAEhC,YAAM,oBAAoB,SAAS;AAEnC,UAAI,OAAO,OAAO,SAAS,mBAAmB;AAC5C;AAAA,MACF;AACA,YAAM,UAAU,OAAO,OACpB,SAAS,QAAQ,SAAS,aAAa,EACvC,SAAS,OAAO;AAEnB,aAAO,SAAS,OAAO,OAAO,SAAS,iBAAiB;AAExD,UAAI;AACF,cAAM,aAAa,KAAK,MAAM,OAAO;AAErC,gBAAQ,IAAI,UAAU;AAEtB,cAAM,UAAU,uBAAuB,UAAU;AAEjD,cAAM,QAAQ,QAAQ,UAAU;AAAA,MAClC,SAAS,GAAG;AACV,gBAAQ,MAAM,CAAC;AACf,gBAAQ,KAAK,CAAC;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,MAAM,OAAO,gBAAgB,MAAM,OAAO;AAChD,YAAQ,IAAI,WAAW,OAAO,eAAe,OAAO,UAAU;AAC9D,WAAO,WAAW,GAAG;AACrB,aAAS;AAAA,EACX;AAAA,EAEA,QAAQ,QAAQ,KAAK;AACnB,UAAM,MAAM,OAAO,gBAAgB,MAAM,OAAO;AAChD,YAAQ,IAAI,WAAW,OAAO,eAAe,OAAO,UAAU;AAC9D,WAAO,WAAW,GAAG;AACrB,aAAS;AAAA,EACX;AACF;AAEA,IAAO,sBAAQ;",
  "names": []
}
